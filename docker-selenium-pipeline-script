def jobs = []
for (i in 1..Integer.parseInt("${Machines}")) {
   println i
   jobs.add("test-node${i}")
}
println jobs

def parallelStagesMap = jobs.collectEntries {
    ["${it}" : generateStage(it)]
}

def parallelCleanupMap = jobs.collectEntries {
    ["${it}" : finish(it)]
}

def joinSwarmMap = jobs.collectEntries {
    ["${it}" : joinSwarm(it)]
}

def parallelSlaveExecution = jobs.collectEntries {
    ["${it}" : slaveExecution(it)]
}

def generateStage(job) {
    return {
        stage("stage: ${job}") {
                echo "${job} creation started..."
                sh script: "docker-machine create --driver digitalocean --digitalocean-access-token 6d90af56591727ad588946945ee25f0b20a9149a8807acc9483e74dae183fb0f -digitalocean-size ${MachineCapacity} --engine-install-url \"https://releases.rancher.com/install-docker/19.03.9.sh\" ${job}"
                echo "${job} created successfully..."
        }
    }
}

def finish(job) {
    return {
        stage("stage: clean-up ${job}") {
                sh script: "docker-machine stop ${job}"
                sh script: "docker-machine rm -y ${job}"
        }
    }
}

def joinSwarm(job) {
    return {
        stage("stage: join-swarm ${job}") {
            script{
            try{
            sh script: "docker-machine ssh ${job} 'docker swarm join --token ${swarmToken} ${managerIP}:2377'"
            }catch(err) {
                echo 'Error Printed'
            }
            }
        }
    }
}

def slaveExecution(job) {
    slaves=[]
    return {
            script{
            slaveCID_$job = sh (
                    script: "docker-machine ssh ${job} 'docker ps -aqf name=slave'",
                    returnStdout: true,
                    ).trim()
                echo "${job} Slave container id is ${slaveCID_$job}"
                slaves.add("${slaveCID_$job}")
            }
        println slaves
        
        script{
            temp = sh (
                    script: "echo ${slaves} | sed 's/[][]//g'",
                    returnStdout: true,
                    ).trim()
        }
        script{
            slaveIDs = sh (
                    script: "echo $temp | tr -d ' '",
                    returnStdout: true,
                    ).trim()
        }
                println slaveIDs
    }
}

pipeline {
    agent any

    stages {
        stage('Setup manager node') {
            steps {
                echo 'Bring up manager node...'
                sh script: "docker-machine create --driver digitalocean --digitalocean-access-token 6d90af56591727ad588946945ee25f0b20a9149a8807acc9483e74dae183fb0f -digitalocean-size s-4vcpu-8gb --engine-install-url \"https://releases.rancher.com/install-docker/19.03.9.sh\" manager"
                echo 'Configuring manager node...'
                sh script: "docker-machine ssh manager curl -L --fail https://github.com/docker/compose/releases/download/1.29.1/run.sh -o /usr/local/bin/docker-compose"
                sh 'docker-machine ssh manager sudo chmod +x /usr/local/bin/docker-compose'
                sh 'docker-machine ssh manager docker-compose -v'
                echo 'Copying project files on manager node...'
                sh 'docker-machine scp -r /Users/maneeshkumar/Documents/workspace/docker-swarm manager:'
                sh 'docker-machine ssh manager sudo apt update'
                sh 'docker-machine ssh manager sudo apt install -y default-jdk'
                sh 'docker-machine ssh manager sudo apt install -y maven'
                sh 'docker-machine ssh manager mvn -version'
                sh 'docker-machine ssh manager sudo apt install -y git'
                sh 'docker-machine ssh manager git --version'
                script{
                managerIP = sh (
                    script: 'docker-machine ip manager',
                    returnStdout: true
                    ).trim()
                echo "Manager IP address is ${managerIP}"
                }
            }
        }
        stage('Setup node machines') {
            steps {
                script {
                    parallel parallelStagesMap
                }
            }
        }
        stage('Initialize docker-swarm') {
            steps {
                script{
                sh script: "docker-machine ssh manager 'docker swarm init --listen-addr=${managerIP}:2377 --advertise-addr=${managerIP}:2377'"
                swarmToken = sh (
                    script: 'docker-machine ssh manager docker swarm join-token worker -q',
                    returnStdout: true
                    ).trim()
                echo "Swarm Token is ${swarmToken}"
                }
            }
        }
        stage('Nodes join docker swarm') {
            steps {
                script {
                    echo 'Hello'
                    parallel joinSwarmMap
                }
            }
        }
        stage ('Pulling project code from GitHub'){
            steps{
                sh 'docker-machine ssh manager git clone https://github.com/kumarmaneesh/docker-selenium-test.git'
            }
        }
        stage('Staring Grid...') {
            steps {
                script {
                sh 'docker-machine ssh manager docker stack deploy -c docker-swarm/docker-compose-grid.yml grid'
                sh 'sleep 20'
                sh 'docker-machine ssh manager docker service scale grid_chrome=${ContainersPerNode}'
                sh 'sleep 10'
                }
            }
        }
        stage ('Running Tests...'){
            steps{
                parallel(
                smoke_pack :{
                    sh 'docker-machine ssh manager mvn test -f /root/docker-selenium-test/pom.xml -Dtest=Test -DfailIfNoTests=false -Dcucumber.options=\\"--tags @smoke -p json:target/cucumber-json/smoke.json\\"'
                },
                sanity_pack :{
                    sh 'docker-machine ssh manager mvn test -f /root/docker-selenium-test/pom.xml -Dtest=Test -DfailIfNoTests=false -Dcucumber.options=\\"--tags @sanity -p json:target/cucumber-json/sanity.json\\"'
                },
                regression_pack :{
                    sh 'docker-machine ssh manager mvn test -f /root/docker-selenium-test/pom.xml -Dtest=Test -DfailIfNoTests=false -Dcucumber.options=\\"--tags @regression -p json:target/cucumber-json/regression.json\\"'
                },
                hardness_tests :{
                    sh 'docker-machine ssh manager mvn test -f /root/docker-selenium-test/pom.xml -Dtest=Test -DfailIfNoTests=false -Dcucumber.options=\\"--tags @hardness -p json:target/cucumber-json/hardness.json\\"'
                },
                water_tests :{
                    sh 'docker-machine ssh manager mvn test -f /root/docker-selenium-test/pom.xml -Dtest=Test -DfailIfNoTests=false -Dcucumber.options=\\"--tags @water -p json:target/cucumber-json/water.json\\"'
                },
                fire_tests :{
                    sh 'docker-machine ssh manager mvn test -f /root/docker-selenium-test/pom.xml -Dtest=Test -DfailIfNoTests=false -Dcucumber.options=\\"--tags @fire -p json:target/cucumber-json/fire.json\\"'
                }
               )
            }
        }
        stage('Generate Report...') {
            steps {
                script {
                sh 'docker-machine ssh manager mvn verify -f /root/docker-selenium-test/pom.xml -DskipTests=true'
                }
            }
        }
        stage('Copy Report to Local Directory...') {
            steps {
                script {
                sh 'docker-machine ssh manager mvn verify -f /root/docker-selenium-test/pom.xml -DskipTests=true'
                }
            }
        }
        stage('Copy Report to Local Directory...') {
            steps {
                script {
                sh 'docker-machine scp -r manager:/root/docker-selenium-test/target .'
                }
            }
        }
        stage('tear-down nodes') {
            steps {
                script {
                    echo 'tearing down slave nodes...'
                    parallel parallelCleanupMap
                }
            }
        }
    }
}