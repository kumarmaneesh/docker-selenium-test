def jobs = []
for (i in 1..Integer.parseInt("${Machines}")) {
   println i
   jobs.add("test-node${i}")
}
println jobs

def parallelStagesMap = jobs.collectEntries {
    ["${it}" : generateStage(it)]
}

def parallelCleanupMap = jobs.collectEntries {
    ["${it}" : finish(it)]
}

def joinSwarmMap = jobs.collectEntries {
    ["${it}" : joinSwarm(it)]
}

def parallelSlaveExecution = jobs.collectEntries {
    ["${it}" : slaveExecution(it)]
}

def generateStage(job) {
    return {
        stage("stage: ${job}") {
                echo "${job} creation started..."
                sh script: "docker-machine create --driver digitalocean --digitalocean-access-token 7cfaf2a167a8351a744792398dcff16aa5f395aa579ad45edab5d3b01d4334fd -digitalocean-size ${MachineCapacity} ${job}"
                echo "${job} created successfully..."
        }
    }
}

def finish(job) {
    return {
        stage("stage: clean-up ${job}") {
                sh script: "docker-machine stop ${job}"
                sh script: "docker-machine rm -y ${job}"
        }
    }
}

def joinSwarm(job) {
    return {
        stage("stage: join-swarm ${job}") {
            script{
            try{
            sh script: "docker-machine ssh ${job} 'docker swarm join --token ${swarmToken} ${managerIP}:2377'"
            }catch(err) {
                echo 'Error Printed'
            }
            }
        }
    }
}

def slaveExecution(job) {
    slaves=[]
    return {
            script{
            slaveCID_$job = sh (
                    script: "docker-machine ssh ${job} 'docker ps -aqf name=slave'",
                    returnStdout: true,
                    ).trim()
                echo "${job} Slave container id is ${slaveCID_$job}"
                slaves.add("${slaveCID_$job}")
            }
        println slaves
        
        script{
            temp = sh (
                    script: "echo ${slaves} | sed 's/[][]//g'",
                    returnStdout: true,
                    ).trim()
        }
        script{
            slaveIDs = sh (
                    script: "echo $temp | tr -d ' '",
                    returnStdout: true,
                    ).trim()
        }
                println slaveIDs
    }
}

pipeline {
    agent any

    stages {
        stage('Setup manager node') {
            steps {
                echo 'Bring up manager node...'
                sh script: "docker-machine create --driver digitalocean --digitalocean-access-token 7cfaf2a167a8351a744792398dcff16aa5f395aa579ad45edab5d3b01d4334fd -digitalocean-size 16gb manager"
                echo 'Configuring manager node...'
                sh 'docker-machine ssh manager sudo apt install -y python-pip'
                sh 'docker-machine ssh manager sudo pip install docker-compose'
                sh 'docker-machine ssh manager docker-compose -v'
                echo 'Copying project files on manager node...'
                sh 'docker-machine scp -r /Users/maneeshkumar/Documents/workspace/docker-swarm manager:'
                script{
                managerIP = sh (
                    script: 'docker-machine ip manager',
                    returnStdout: true
                    ).trim()
                echo "Manager IP address is ${managerIP}"
                }
            }
        }
        stage('Setup node machines') {
            steps {
                script {
                    parallel parallelStagesMap
                }
            }
        }
        stage('Initialize docker-swarm') {
            steps {
                script{
                sh script: "docker-machine ssh manager 'docker swarm init --listen-addr=${managerIP}:2377 --advertise-addr=${managerIP}:2377'"
                swarmToken = sh (
                    script: 'docker-machine ssh manager docker swarm join-token worker -q',
                    returnStdout: true
                    ).trim()
                echo "Swarm Token is ${swarmToken}"
                }
            }
        }
        stage('Nodes join docker swarm') {
            steps {
                script {
                    echo 'Hello'
                    parallel joinSwarmMap
                }
            }
        }
        stage('Staring DJ...') {
            steps {
                script {
                sh 'docker-machine ssh manager docker stack deploy -c docker-swarm/docker-compose.yml jm'
                sh 'sleep 30'
                sh 'docker-machine ssh manager docker service scale jm_slave=${Machines}'
                }
            }
        }
        stage('Copy test plan on master node...') {
            steps {
                script{
                echo "Executing tests..."
                masterCID = sh (
                    script: 'docker-machine ssh manager docker ps -aqf name=master',
                    returnStdout: true,
                    ).trim()
                echo "Master container id is ${masterCID}"
                }
                sh script: "docker-machine ssh manager 'docker cp docker-swarm/InfluxGrafanaDemo.jmx ${masterCID}:tmp'"
            }
        }
        stage('Fetching slave container ids...') {
            steps {
                script {
                    parallel parallelSlaveExecution
                }
            }
        }
        stage('Executing test on slave nodes...') {
            steps {
                script {
                    try{
                    sh script: "docker-machine ssh manager 'docker exec -i ${masterCID} jmeter -n -t /tmp/InfluxGrafanaDemo.jmx -R ${slaveIDs}'"
                    }catch(err) {
                    echo 'Error Printed'
                    }
                }
            }
        }
        stage ('Backup results'){
            steps{
                script{
                influxCID = sh (
                    script: "docker-machine ssh manager 'docker ps -aqf name=influx'",
                    returnStdout: true,
                    ).trim()
                echo "InfluxDB container id is ${influxCID}"
                }
                sh script: "docker-machine ssh manager 'docker exec -i ${influxCID} influxd backup -portable -database jmeter -host localhost:8088 /tmp/results'"
                sh script: "docker-machine ssh manager 'docker cp ${influxCID}:tmp/results .'"
            }
        }
        stage('tear-down slave nodes') {
            steps {
                script {
                    echo 'tearing down slave nodes...'
                    parallel parallelCleanupMap
                }
            }
        }
    }
}